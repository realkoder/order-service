server:
  shutdown: graceful
  port: 9002
  netty:
    connection-timeout: 2s # How long to wait for a TCP connection
    idle-timeout: 15s # How long to wait before closing TCP connection if no data transferred

spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15 # Defines a 15 sec grace period
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order
  config:
    import: "optional:configserver:"
    cloud:
      config:
        uri: http://localhost:8888
        request-connect-timeout: 5000 # 5s
        request-read-timeout: 5000 # 5s
        fail-fast: false # In production, set to true
        retry:
          max-attempts: 6
          initial-interval: 1000 # 1s
          max-interval: 2000 # 2s
          multiplier: 1.1

  cloud:
    function:
      definition: dispatchOrder # Function managed by SpringCloudStream -> defined in OrderFunctions class
    stream:
      bindings:
        dispathcOrder-in-0:
          destination: order-dispatched # Actual name which binder binds (exchange in RabbitMQ)
          group: {spring.application.name}
        acceptOrder-out-0:
          destination: order-accepted
      rabbit:
        bindings:
          acceptedOrder-out-0:
            producer:
              transacted: true # Makes the binding transactional - see submitOrder func within OrderService.class

  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5

polar:
  catalog-service-uri: "http://localhost:9001"